Restivus,
  (indexOf =
    [].indexOf ||
    function(item) {
      for (let i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item) return i;
      }
      return -1;
    });

this.Restivus = (function() {
  function Restivus(options) {
    let corsHeaders;
    this._routes = [];
    this._config = {
      paths: [],
      apiPath: 'api/',
      version: null,
      prettyJson: false,
      defaultHeaders: {
        'Content-Type': 'application/json',
      },
      enableCors: true,
    };
    _.extend(this._config, options);
    if (this._config.enableCors) {
      corsHeaders = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',
      };
      _.extend(this._config.defaultHeaders, corsHeaders);
      if (!this._config.defaultOptionsEndpoint) {
        this._config.defaultOptionsEndpoint = function() {
          this.response.writeHead(200, corsHeaders);
          return this.done();
        };
      }
    }
    if (this._config.apiPath[0] === '/') {
      this._config.apiPath = this._config.apiPath.slice(1);
    }
    if (_.last(this._config.apiPath) !== '/') {
      this._config.apiPath = `${this._config.apiPath}/`;
    }
    if (this._config.version) {
      this._config.apiPath += `${this._config.version}/`;
    }
    return this;
  }

  /**
   Add endpoints for the given HTTP methods at the given path

   @param path {String} The extended URL path (will be appended to base path of the API)
   @param options {Object} Route configuration options
   @param endpoints {Object} A set of endpoints available on the new route (get, post, put, patch, delete, options)
   @param endpoints.<method> {Function or Object} If a function is provided, all default route
   configuration options will be applied to the endpoint. Otherwise an object with an `action`
   and all other route config options available. An `action` must be provided with the object.
   */

  Restivus.prototype.addRoute = function(path, options, endpoints) {
    let route;
    route = new Route(this, path, options, endpoints);
    this._routes.push(route);
    route.addToApi();
    return this;
  };

  return Restivus;
})();

Restivus = this.Restivus;

// ---
// generated by coffee-script 1.9.2
